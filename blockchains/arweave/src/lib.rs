mod types;

use rcc_trait_chain::Chain;
use serde_json::json;
use crate::types::error::ArweaveError;
use crate::types::transaction::Transaction;

struct Arweave {}

impl Chain<ArweaveError> for Arweave {
    fn parse(data: &Vec<u8>) -> Result<String, ArweaveError> {
        let tx = match serde_json::from_slice::<Transaction>(data) {
            Ok(tx) => {
                json!({
                    "raw_json": tx,
                    "formatted_json": {
                        "owner": tx.owner,
                        "target": tx.target,
                        "quantity": tx.quantity,
                        "reward": tx.reward,
                        "data_size": tx.data_size,
                        "signature_data": tx.deep_hash().map_or_else(|e| format!("unable to deep hash transaction, reason: {}", e.to_string()), |data| hex::encode(data)),
                    },
                    "status": "success"
                })
            },
            Err(e) => {
                let readable = format!("unable to deserialize, reason: {}", e.to_string());
                json!({
                    "status": "failed",
                    "reason": readable
                })
            }
        };
        Ok(tx.to_string())
    }
}


#[cfg(test)]
mod tests {
    use super::*;
    use serde_json::Value;

    #[test]
    fn test_parse_tx_without_data() {
        // {"format":2,"id":"ydBnEDXkltirHF_89nDaAeJQsyh6ocVFH6w3bGdb4EQ","last_tx":"IgIzkTrNA1SG-aYLVGQM1eUEm_b-7Jq3F8_BCU_j6Uv25rz80zFGgC4Qd_Qazsy-","owner":"sSWWDVR8jBbeoGemy4M1VuhUM_0CusXRXdTavi46PUVcP814Km3szmVlk71l_-rBYjXNyrMr25_LWMHEOIQyfq2Dn-29iBbYqk608SGj3YHI2LnR6z3dxLBVxwT5atTu5iZnMfZ--NQinA64iIGrTQ3nG2A31s5lDT58VQsX7AF_eaVCwWYoyCKvUjKeduNmUSIjGl7sitr-tooTdcbAhshka55LCqd6brO24ZzB0iieWwrwAyN4LZpcjx36dMaR9q1L5nY5d-BnSZhVk2-_A8S-P7WfRrudTSUZMF8fV9o2Cd55T-h5wlHP5Xxh5BO45TZemwFRzFKX3qIEwKNZx_uCDhTlMmKpxtMaj2i0-gxI1QeXrHYv76KfgZy2U2XMW2H4Mpfr_WO2KM2_b6cWQUenPDnqzgRXsq6GXdHUFgV-qi1M_i4MCE6AD5-QlPQ_QcBa_ZfldowFL2PAC_hykEyDfRS7Mwx_Fw47g70sVbWE1DP9MEfxGC9vmOiDedroG2EqvT0VpM-xIzzhpGPWH_zNFcNSqj8s_zSqqtnXtlcTtbk76IpK8tKjDfIHq1JHZg__wobyfM0fiAqH6fJatUCLgWPGTbJ9M46uJw8bFI72py_2MdrxBkW-sNBoa21_g-6FUNH4dHWA8gGEwka5-BMnvaMYpAKAqQ2-GGYw1pE","tags":[{"name":"QXBwLU5hbWU","value":"QXJDb25uZWN0"},{"name":"QXBwLVZlcnNpb24","value":"MC40LjI"},{"name":"Q29udGVudC1UeXBl","value":"dGV4dC9wbGFpbg"}],"target":"gH04U_MDvhKdEeSVHqFnkx7xi4dsuKj94O9qRh50LSQ","quantity":"10000000","data":"","data_size":"0","data_root":"","reward":"1410507854"}
        let tx_bytes = hex::decode("7b22666f726d6174223a322c226964223a227964426e4544586b6c74697248465f38396e446141654a51737968366f6356464836773362476462344551222c226c6173745f7478223a224967497a6b54724e413153472d61594c5647514d316555456d5f622d374a713346385f4243555f6a3655763235727a38307a464767433451645f51617a73792d222c226f776e6572223a2273535757445652386a4262656f47656d79344d31567568554d5f304375735852586454617669343650555663503831344b6d33737a6d566c6b37316c5f2d7242596a584e79724d7232355f4c574d48454f495179667132446e2d323969426259716b36303853476a33594849324c6e52367a3364784c4256787754356174547535695a6e4d665a2d2d4e51696e413634694947725451336e473241333173356c44543538565173583741465f656156437757596f79434b76556a4b6564754e6d5553496a476c37736974722d746f6f54646362416873686b6135354c4371643662724f32345a7a42306969655777727741794e344c5a70636a783336644d61523971314c356e5935642d426e535a68566b322d5f4138532d50375766527275645453555a4d46386656396f3243643535542d6835776c48503558786835424f3435545a656d7746527a464b5833714945774b4e5a785f75434468546c4d6d4b7078744d616a3269302d677849315165587248597637364b66675a79325532584d573248344d7066725f574f324b4d325f623663575155656e50446e717a67525873713647586448554667562d7169314d5f69344d4345364144352d516c50515f516342615f5a666c646f77464c325041435f68796b457944665253374d77785f467734376737307356625745314450394d456678474339766d4f69446564726f4732457176543056704d2d78497a7a6870475057485f7a4e46634e53716a38735f7a537171746e58746c635474626b373649704b38744b6a4466494871314a485a675f5f776f6279664d30666941714836664a617455434c6757504754624a394d3436754a7738624649373270795f324d647278426b572d734e426f6132315f672d3646554e48346448574138674745776b61352d424d6e76614d5970414b417151322d47475977317045222c2274616773223a5b7b226e616d65223a22515842774c553568625755222c2276616c7565223a2251584a44623235755a574e30227d2c7b226e616d65223a22515842774c565a6c636e4e70623234222c2276616c7565223a224d4334304c6a49227d2c7b226e616d65223a225132397564475675644331556558426c222c2276616c7565223a226447563464433977624746706267227d5d2c22746172676574223a2267483034555f4d4476684b64456553564871466e6b78377869346473754b6a39344f3971526835304c5351222c227175616e74697479223a223130303030303030222c2264617461223a22222c22646174615f73697a65223a2230222c22646174615f726f6f74223a22222c22726577617264223a2231343130353037383534227d").unwrap();
        let tx =  Arweave::parse(&tx_bytes).unwrap();
        let parsed_tx: Value  = serde_json::from_str(&tx).unwrap();
        assert_eq!(parsed_tx["formatted_json"]["signature_data"], "87a9bb37c154b9dc27b4203c54b68301df51811383da8cd217a163356b3fa6325bc9ab6dd6e2f63f1200ac295646fc98");
    }

    #[test]
    fn test_parse_tx_with_data(){
        //{
        //     "format": 2,
        //     "id": "OUIpMNs---VcgpXTecDjNUDXHh4lCEitsBs9LkpDnMg",
        //     "last_tx": "funF-hqTAT6P99tS3-zRqbnBltN7ksTsuOndkOvskChpTZdXTR8RgwKjztzer_JV",
        //     "owner": "tW3_qttE4BnykJyFhOYmdIRDSgFhoqbtaNHw8b77S-2HyDUiZITC21VnJQ_4efMb78h88lQ9Pj4em5LKixN4dx-jPJxvQOjF-VG0zOb2YtBXi_JnDQLQyuA0MK_7r1TfesbG7a_3niEyaEqfM8xuLrZ_rIy0xzt8DCsuiBcLtTuT9xneH_xPe7GV2qXlkM-k34wCPlcL0N99pwP--ECr9QLNpPUnhUwK7Gz0_bTojbErD_RSko0GT6nNjhCsMjQBT60gWe8-Xqz23rokCdN2jG9kSA52GgkN63EdibNW-U9g2NLE8r0XcICrMjIqiUaLNJRwZzMS1xsX_ySXaeMNMUrhwaaPjnzDEqNcyX89-0rXZtFrmIaJb8jTinwGvBds0UwdT-NXGtbVRfrwWOTkbJT--GFZS_fvpe1VhpVLz2o0l0YairrjE5AZb8T463qOHtJ4tlCpEQcC6oJA2MSrkg3qcsBdJLkA24xOZO3TiCSStlOMbMGTWF72050OU3M2hLAE7Rdk6VaJNy-RhgcR7OlhDYPElUlcOKAu6Kr7n9dNHjKVE3GyFFieMs7lgrkUSHuVfxwF0_lek_YJ8BvlCKfeYpevwXvIDvyLqD0sWLRUCLbGKmL2QPC-yvhlBdslyyXckMZN2_MofXg5YVYOzx8A2V_04IGpqB7-_MU2Xl0",
        //     "tags": [
        //         {
        //             "name": "QXBwLU5hbWU",
        //             "value": "QXJEcml2ZS1XZWI"
        //         },
        //         {
        //             "name": "QXBwLVZlcnNpb24",
        //             "value": "MC4xLjA"
        //         },
        //         {
        //             "name": "Q29udGVudC1UeXBl",
        //             "value": "YXBwbGljYXRpb24vanNvbg"
        //         },
        //         {
        //             "name": "QXJGUw",
        //             "value": "MC4xMQ"
        //         },
        //         {
        //             "name": "RW50aXR5LVR5cGU",
        //             "value": "ZHJpdmU"
        //         },
        //         {
        //             "name": "VW5peC1UaW1l",
        //             "value": "MTY2NzgwMDEzNQ"
        //         },
        //         {
        //             "name": "RHJpdmUtSWQ",
        //             "value": "NTMyODczOTgtYTY3MC00YTM2LTk0M2QtYTUwZmJiMGVjZGMw"
        //         },
        //         {
        //             "name": "RHJpdmUtUHJpdmFjeQ",
        //             "value": "cHVibGlj"
        //         },
        //         {
        //             "name": "QXJEcml2ZS1DbGllbnQ",
        //             "value": "QXJDb25uZWN0LzAuNS4x"
        //         }
        //     ],
        //     "target": "",
        //     "quantity": "0",
        //     "data": "eyJuYW1lIjoiQXJDb25uZWN0IEFyY2hpdmVzIiwicm9vdEZvbGRlcklkIjoiNmNjMTg1ZGMtZmNjMC00NDMxLTg3ZDAtOTlhNzg2OGQ2ZWU1In0",
        //     "data_size": "83",
        //     "data_root": "ZMJNKS_lemQ1ghfLvNcnoXvNe61_7_B08flTDZYN3Eg",
        //     "reward": "52221667"
        // }
        let tx_bytes = hex::decode("7b0d0a2020202022666f726d6174223a20322c0d0a20202020226964223a20224f5549704d4e732d2d2d5663677058546563446a4e5544584868346c43456974734273394c6b70446e4d67222c0d0a20202020226c6173745f7478223a202266756e462d6871544154365039397453332d7a5271626e426c744e376b735473754f6e646b4f76736b436870545a64585452385267774b6a7a747a65725f4a56222c0d0a20202020226f776e6572223a20227457335f7174744534426e796b4a7946684f596d64495244536746686f716274614e487738623737532d3248794455695a4954433231566e4a515f3465664d6237386838386c5139506a34656d354c4b69784e3464782d6a504a7876514f6a462d5647307a4f623259744258695f4a6e44514c51797541304d4b5f37723154666573624737615f336e694579614571664d3878754c725a5f72497930787a7438444373756942634c7454755439786e65485f7850653747563271586c6b4d2d6b33347743506c634c304e39397077502d2d45437239514c4e7050556e6855774b37477a305f62546f6a624572445f52536b6f304754366e4e6a6843734d6a5142543630675765382d58717a3233726f6b43644e326a47396b5341353247676b4e3633456469624e572d553967324e4c4538723058634943724d6a49716955614c4e4a52775a7a4d53317873585f79535861654d4e4d557268776161506a6e7a4445714e63795838392d3072585a7446726d49614a62386a54696e77477642647330557764542d4e584774625652667277574f546b624a542d2d47465a535f6676706531566870564c7a326f306c3059616972726a4535415a623854343633714f48744a34746c437045516343366f4a41324d53726b673371637342644a4c6b413234784f5a4f335469435353746c4f4d624d4754574637323035304f55334d32684c41453752646b3656614a4e792d5268676352374f6c68445950456c556c634f4b4175364b72376e39644e486a4b5645334779464669654d73376c67726b555348755666787746305f6c656b5f594a3842766c434b666559706576775876494476794c71443073574c5255434c62474b6d4c325150432d7976686c4264736c797958636b4d5a4e325f4d6f665867355956594f7a78384132565f30344947707142372d5f4d5532586c30222c0d0a202020202274616773223a205b0d0a20202020202020207b0d0a202020202020202020202020226e616d65223a2022515842774c553568625755222c0d0a2020202020202020202020202276616c7565223a202251584a45636d6c325a5331585a5749220d0a20202020202020207d2c0d0a20202020202020207b0d0a202020202020202020202020226e616d65223a2022515842774c565a6c636e4e70623234222c0d0a2020202020202020202020202276616c7565223a20224d4334784c6a41220d0a20202020202020207d2c0d0a20202020202020207b0d0a202020202020202020202020226e616d65223a20225132397564475675644331556558426c222c0d0a2020202020202020202020202276616c7565223a20225958427762476c6a5958527062323476616e4e766267220d0a20202020202020207d2c0d0a20202020202020207b0d0a202020202020202020202020226e616d65223a202251584a475577222c0d0a2020202020202020202020202276616c7565223a20224d4334784d51220d0a20202020202020207d2c0d0a20202020202020207b0d0a202020202020202020202020226e616d65223a202252573530615852354c565235634755222c0d0a2020202020202020202020202276616c7565223a20225a484a70646d55220d0a20202020202020207d2c0d0a20202020202020207b0d0a202020202020202020202020226e616d65223a202256573570654331556157316c222c0d0a2020202020202020202020202276616c7565223a20224d5459324e7a67774d44457a4e51220d0a20202020202020207d2c0d0a20202020202020207b0d0a202020202020202020202020226e616d65223a202252484a70646d5574535751222c0d0a2020202020202020202020202276616c7565223a20224e544d794f44637a4f546774595459334d43303059544d324c546b304d325174595455775a6d4a694d47566a5a474d77220d0a20202020202020207d2c0d0a20202020202020207b0d0a202020202020202020202020226e616d65223a202252484a70646d557455484a70646d466a6551222c0d0a2020202020202020202020202276616c7565223a20226348566962476c6a220d0a20202020202020207d2c0d0a20202020202020207b0d0a202020202020202020202020226e616d65223a202251584a45636d6c325a53314462476c6c626e51222c0d0a2020202020202020202020202276616c7565223a202251584a44623235755a574e304c7a41754e533478220d0a20202020202020207d0d0a202020205d2c0d0a2020202022746172676574223a2022222c0d0a20202020227175616e74697479223a202230222c0d0a202020202264617461223a202265794a755957316c496a6f6951584a44623235755a574e304945467959326870646d567a49697769636d397664455a766247526c636b6c6b496a6f694e6d4e6a4d5467315a474d745a6d4e6a4d4330304e444d784c5467335a4441744f546c684e7a67324f4751325a575531496e30222c0d0a2020202022646174615f73697a65223a20223833222c0d0a2020202022646174615f726f6f74223a20225a4d4a4e4b535f6c656d51316768664c764e636e6f58764e6536315f375f423038666c54445a594e334567222c0d0a2020202022726577617264223a20223532323231363637227d").unwrap();
        let tx =  Arweave::parse(&tx_bytes).unwrap();
        let parsed_tx: Value  = serde_json::from_str(&tx).unwrap();
        assert_eq!(parsed_tx["formatted_json"]["signature_data"], "00f41cfa7bfad3d7b097fcc28ed08cb4ca7d0c544ec760cc6cc5c4f3780d0ec43cc011eaaab0868393c3c813ab8c04df");
    }
}
