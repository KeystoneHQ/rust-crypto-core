mod types;

use rcc_trait_chain::Chain;
use serde_json::json;
use crate::types::error::ArweaveError;
use crate::types::transaction::Transaction;

pub struct Arweave {}

impl Chain<ArweaveError> for Arweave {
    fn parse(data: &Vec<u8>) -> Result<String, ArweaveError> {
        let tx = match serde_json::from_slice::<Transaction>(data) {
            Ok(tx) => {
                json!({
                    "raw_json": tx,
                    "formatted_json": {
                        "owner": tx.owner,
                        "target": tx.target,
                        "quantity": tx.quantity,
                        "reward": tx.reward,
                        "data_size": tx.data_size,
                        "signature_data": tx.deep_hash().map_or_else(|e| format!("unable to deep hash transaction, reason: {}", e.to_string()), |data| hex::encode(data)),
                    },
                    "status": "success"
                })
            },
            Err(e) => {
                let readable = format!("unable to deserialize, reason: {}", e.to_string());
                json!({
                    "status": "failed",
                    "reason": readable
                })
            }
        };
        Ok(tx.to_string())
    }
}


#[cfg(test)]
mod tests {
    use super::*;
    use serde_json::Value;
    use crate::types::hash::deep_hash;
    use crate::types::transaction::{Base64, DeepHashItem, Tag};
    use crate::types::transaction::ToItems;

    #[test]
    fn test_parse_tx_without_data() {
        // {"format":2,"id":"ydBnEDXkltirHF_89nDaAeJQsyh6ocVFH6w3bGdb4EQ","last_tx":"IgIzkTrNA1SG-aYLVGQM1eUEm_b-7Jq3F8_BCU_j6Uv25rz80zFGgC4Qd_Qazsy-","owner":"sSWWDVR8jBbeoGemy4M1VuhUM_0CusXRXdTavi46PUVcP814Km3szmVlk71l_-rBYjXNyrMr25_LWMHEOIQyfq2Dn-29iBbYqk608SGj3YHI2LnR6z3dxLBVxwT5atTu5iZnMfZ--NQinA64iIGrTQ3nG2A31s5lDT58VQsX7AF_eaVCwWYoyCKvUjKeduNmUSIjGl7sitr-tooTdcbAhshka55LCqd6brO24ZzB0iieWwrwAyN4LZpcjx36dMaR9q1L5nY5d-BnSZhVk2-_A8S-P7WfRrudTSUZMF8fV9o2Cd55T-h5wlHP5Xxh5BO45TZemwFRzFKX3qIEwKNZx_uCDhTlMmKpxtMaj2i0-gxI1QeXrHYv76KfgZy2U2XMW2H4Mpfr_WO2KM2_b6cWQUenPDnqzgRXsq6GXdHUFgV-qi1M_i4MCE6AD5-QlPQ_QcBa_ZfldowFL2PAC_hykEyDfRS7Mwx_Fw47g70sVbWE1DP9MEfxGC9vmOiDedroG2EqvT0VpM-xIzzhpGPWH_zNFcNSqj8s_zSqqtnXtlcTtbk76IpK8tKjDfIHq1JHZg__wobyfM0fiAqH6fJatUCLgWPGTbJ9M46uJw8bFI72py_2MdrxBkW-sNBoa21_g-6FUNH4dHWA8gGEwka5-BMnvaMYpAKAqQ2-GGYw1pE","tags":[{"name":"QXBwLU5hbWU","value":"QXJDb25uZWN0"},{"name":"QXBwLVZlcnNpb24","value":"MC40LjI"},{"name":"Q29udGVudC1UeXBl","value":"dGV4dC9wbGFpbg"}],"target":"gH04U_MDvhKdEeSVHqFnkx7xi4dsuKj94O9qRh50LSQ","quantity":"10000000","data":"","data_size":"0","data_root":"","reward":"1410507854"}
        let tx_bytes = hex::decode("7b22666f726d6174223a322c226964223a227964426e4544586b6c74697248465f38396e446141654a51737968366f6356464836773362476462344551222c226c6173745f7478223a224967497a6b54724e413153472d61594c5647514d316555456d5f622d374a713346385f4243555f6a3655763235727a38307a464767433451645f51617a73792d222c226f776e6572223a2273535757445652386a4262656f47656d79344d31567568554d5f304375735852586454617669343650555663503831344b6d33737a6d566c6b37316c5f2d7242596a584e79724d7232355f4c574d48454f495179667132446e2d323969426259716b36303853476a33594849324c6e52367a3364784c4256787754356174547535695a6e4d665a2d2d4e51696e413634694947725451336e473241333173356c44543538565173583741465f656156437757596f79434b76556a4b6564754e6d5553496a476c37736974722d746f6f54646362416873686b6135354c4371643662724f32345a7a42306969655777727741794e344c5a70636a783336644d61523971314c356e5935642d426e535a68566b322d5f4138532d50375766527275645453555a4d46386656396f3243643535542d6835776c48503558786835424f3435545a656d7746527a464b5833714945774b4e5a785f75434468546c4d6d4b7078744d616a3269302d677849315165587248597637364b66675a79325532584d573248344d7066725f574f324b4d325f623663575155656e50446e717a67525873713647586448554667562d7169314d5f69344d4345364144352d516c50515f516342615f5a666c646f77464c325041435f68796b457944665253374d77785f467734376737307356625745314450394d456678474339766d4f69446564726f4732457176543056704d2d78497a7a6870475057485f7a4e46634e53716a38735f7a537171746e58746c635474626b373649704b38744b6a4466494871314a485a675f5f776f6279664d30666941714836664a617455434c6757504754624a394d3436754a7738624649373270795f324d647278426b572d734e426f6132315f672d3646554e48346448574138674745776b61352d424d6e76614d5970414b417151322d47475977317045222c2274616773223a5b7b226e616d65223a22515842774c553568625755222c2276616c7565223a2251584a44623235755a574e30227d2c7b226e616d65223a22515842774c565a6c636e4e70623234222c2276616c7565223a224d4334304c6a49227d2c7b226e616d65223a225132397564475675644331556558426c222c2276616c7565223a226447563464433977624746706267227d5d2c22746172676574223a2267483034555f4d4476684b64456553564871466e6b78377869346473754b6a39344f3971526835304c5351222c227175616e74697479223a223130303030303030222c2264617461223a22222c22646174615f73697a65223a2230222c22646174615f726f6f74223a22222c22726577617264223a2231343130353037383534227d").unwrap();
        let tx =  Arweave::parse(&tx_bytes).unwrap();
        let parsed_tx: Value  = serde_json::from_str(&tx).unwrap();
        assert_eq!(parsed_tx["formatted_json"]["signature_data"], "87a9bb37c154b9dc27b4203c54b68301df51811383da8cd217a163356b3fa6325bc9ab6dd6e2f63f1200ac295646fc98");
    }

    #[test]
    fn test_parse_tx_with_data(){
        //{
        //     "format": 2,
        //     "id": "OUIpMNs---VcgpXTecDjNUDXHh4lCEitsBs9LkpDnMg",
        //     "last_tx": "funF-hqTAT6P99tS3-zRqbnBltN7ksTsuOndkOvskChpTZdXTR8RgwKjztzer_JV",
        //     "owner": "tW3_qttE4BnykJyFhOYmdIRDSgFhoqbtaNHw8b77S-2HyDUiZITC21VnJQ_4efMb78h88lQ9Pj4em5LKixN4dx-jPJxvQOjF-VG0zOb2YtBXi_JnDQLQyuA0MK_7r1TfesbG7a_3niEyaEqfM8xuLrZ_rIy0xzt8DCsuiBcLtTuT9xneH_xPe7GV2qXlkM-k34wCPlcL0N99pwP--ECr9QLNpPUnhUwK7Gz0_bTojbErD_RSko0GT6nNjhCsMjQBT60gWe8-Xqz23rokCdN2jG9kSA52GgkN63EdibNW-U9g2NLE8r0XcICrMjIqiUaLNJRwZzMS1xsX_ySXaeMNMUrhwaaPjnzDEqNcyX89-0rXZtFrmIaJb8jTinwGvBds0UwdT-NXGtbVRfrwWOTkbJT--GFZS_fvpe1VhpVLz2o0l0YairrjE5AZb8T463qOHtJ4tlCpEQcC6oJA2MSrkg3qcsBdJLkA24xOZO3TiCSStlOMbMGTWF72050OU3M2hLAE7Rdk6VaJNy-RhgcR7OlhDYPElUlcOKAu6Kr7n9dNHjKVE3GyFFieMs7lgrkUSHuVfxwF0_lek_YJ8BvlCKfeYpevwXvIDvyLqD0sWLRUCLbGKmL2QPC-yvhlBdslyyXckMZN2_MofXg5YVYOzx8A2V_04IGpqB7-_MU2Xl0",
        //     "tags": [
        //         {
        //             "name": "QXBwLU5hbWU",
        //             "value": "QXJEcml2ZS1XZWI"
        //         },
        //         {
        //             "name": "QXBwLVZlcnNpb24",
        //             "value": "MC4xLjA"
        //         },
        //         {
        //             "name": "Q29udGVudC1UeXBl",
        //             "value": "YXBwbGljYXRpb24vanNvbg"
        //         },
        //         {
        //             "name": "QXJGUw",
        //             "value": "MC4xMQ"
        //         },
        //         {
        //             "name": "RW50aXR5LVR5cGU",
        //             "value": "ZHJpdmU"
        //         },
        //         {
        //             "name": "VW5peC1UaW1l",
        //             "value": "MTY2NzgwMDEzNQ"
        //         },
        //         {
        //             "name": "RHJpdmUtSWQ",
        //             "value": "NTMyODczOTgtYTY3MC00YTM2LTk0M2QtYTUwZmJiMGVjZGMw"
        //         },
        //         {
        //             "name": "RHJpdmUtUHJpdmFjeQ",
        //             "value": "cHVibGlj"
        //         },
        //         {
        //             "name": "QXJEcml2ZS1DbGllbnQ",
        //             "value": "QXJDb25uZWN0LzAuNS4x"
        //         }
        //     ],
        //     "target": "",
        //     "quantity": "0",
        //     "data": "eyJuYW1lIjoiQXJDb25uZWN0IEFyY2hpdmVzIiwicm9vdEZvbGRlcklkIjoiNmNjMTg1ZGMtZmNjMC00NDMxLTg3ZDAtOTlhNzg2OGQ2ZWU1In0",
        //     "data_size": "83",
        //     "data_root": "ZMJNKS_lemQ1ghfLvNcnoXvNe61_7_B08flTDZYN3Eg",
        //     "reward": "52221667"
        // }
        let tx_bytes = hex::decode("7b22666f726d6174223a322c226964223a22222c226c6173745f7478223a22493535745f53496b745a4c4949683364527262353170626a724f68715f4c7671363142386c35446b7a33484a786d6d52643678765a42583050742d7171566955222c226f776e6572223a227730536a66512d6947784a5a465448496c6f69464734614878414b6f507948793154454e75646936456c695369504273436764674e6a6c37632d4b6374506b416f3046677759643231506e584834484c7747485974506a333874546e514f7643727552756d776e2d33454f53756a39656b503279696b35486c577a384a496339755f6944435a766961346369354e6a325f33505f324c304e674e7056766a6f727853447673362d483746746f6f614d53774d48774c36684f4745646d726c6969484f5a37704c49696f71624156346a37474a70744451373772554b54674e436f354951377a4b6745756765474b537064354b6849544e734477676e6769542d49514b38424c637a3747566761546a7a6f53747a513338576c68454750764c7472735a4154424452567878577a653973746a4534344f30456f4e5a64795442455239687863683561465a4b4e6b546541777954506838534d303276774952367469416c37793757576d65474576366e75454c47624f5461504f52356242543348775034714a36664941464d624f684b50384467506c555a354f654f64634b5644486c4f65626f7368533231655948496e7775647561737a6474334630457a76477957364335434a7330727a34776f4a62636947564c31637435496777374e4451636d7230584e72666b552d58634e3636526c45466633744158783655426651307669644e557a3678556e474e58726b2d694a36476163656a7679352d4e6d35736a3433725f4f44374f4b376662787137383377764d50776f50735965624569582d6351504435355f4e6b68374d3054396268734d4d66464f6f6237525853496637617061446b73477661325f536d787a35485a4861787a6178304a68374d2d67695678696a78744439504b744734756d374c4c393956503756596146703049306f50375546476335526a4955222c2274616773223a5b5d2c22746172676574223a2247556937747151337a4a5732435779773245527777756e4357336f576f493548417369454e4872527a3938222c227175616e74697479223a223130303030303030303030222c2264617461223a22222c22646174615f73697a65223a2230222c22646174615f726f6f74223a22222c22726577617264223a22343632323430222c227369676e6174757265223a22227d").unwrap();
        let tx =  Arweave::parse(&tx_bytes).unwrap();
        let parsed_tx: Value  = serde_json::from_str(&tx).unwrap();
        assert_eq!(parsed_tx["formatted_json"]["signature_data"], "00f41cfa7bfad3d7b097fcc28ed08cb4ca7d0c544ec760cc6cc5c4f3780d0ec43cc011eaaab0868393c3c813ab8c04df");
    }

    #[test]
    fn test_parse_tx_with_data_1(){
        let tx_bytes = hex::decode("7b22666f726d6174223a322c226964223a22222c226c6173745f7478223a224b797341664d666231784a6b316a653263783974463065514a736a486f685f72524f435a6558304739434e6f4736533665594c7043754c5f4a6d444d5a6e474b222c226f776e6572223a227730536a66512d6947784a5a465448496c6f69464734614878414b6f507948793154454e75646936456c695369504273436764674e6a6c37632d4b6374506b416f3046677759643231506e584834484c7747485974506a333874546e514f7643727552756d776e2d33454f53756a39656b503279696b35486c577a384a496339755f6944435a766961346369354e6a325f33505f324c304e674e7056766a6f727853447673362d483746746f6f614d53774d48774c36684f4745646d726c6969484f5a37704c49696f71624156346a37474a70744451373772554b54674e436f354951377a4b6745756765474b537064354b6849544e734477676e6769542d49514b38424c637a3747566761546a7a6f53747a513338576c68454750764c7472735a4154424452567878577a653973746a4534344f30456f4e5a64795442455239687863683561465a4b4e6b546541777954506838534d303276774952367469416c37793757576d65474576366e75454c47624f5461504f52356242543348775034714a36664941464d624f684b50384467506c555a354f654f64634b5644486c4f65626f7368533231655948496e7775647561737a6474334630457a76477957364335434a7330727a34776f4a62636947564c31637435496777374e4451636d7230584e72666b552d58634e3636526c45466633744158783655426651307669644e557a3678556e474e58726b2d694a36476163656a7679352d4e6d35736a3433725f4f44374f4b376662787137383377764d50776f50735965624569582d6351504435355f4e6b68374d3054396268734d4d66464f6f6237525853496637617061446b73477661325f536d787a35485a4861787a6178304a68374d2d67695678696a78744439504b744734756d374c4c393956503756596146703049306f50375546476335526a4955222c2274616773223a5b5d2c22746172676574223a2247556937747151337a4a5732435779773245527777756e4357336f576f493548417369454e4872527a3938222c227175616e74697479223a223130303030303030303030222c2264617461223a22222c22646174615f73697a65223a2230222c22646174615f726f6f74223a22222c22726577617264223a22343632323430222c227369676e6174757265223a22227d").unwrap();
        let tx =  Arweave::parse(&tx_bytes).unwrap();
        let parsed_tx: Value  = serde_json::from_str(&tx).unwrap();
        assert_eq!(parsed_tx["formatted_json"]["signature_data"], "68447623f73b73251aa62405b62b4493e05ad0ba90b48f6bd16ae8c59812b5344a8c53aec25a7f972cff9c2edeba8ae0");
    }

    #[test]
    fn test_parse_tx_with_data_2(){
        let tx_bytes = hex::decode("7b22666f726d6174223a322c226964223a22222c226c6173745f7478223a22454f62386c626f6b634633655f515f685737346e5959365f4c62694f676254345f4a2d6530333670746137794f585f6b517a4a66734d724c7466474e53626a66222c226f776e6572223a227730536a66512d6947784a5a465448496c6f69464734614878414b6f507948793154454e75646936456c695369504273436764674e6a6c37632d4b6374506b416f3046677759643231506e584834484c7747485974506a333874546e514f7643727552756d776e2d33454f53756a39656b503279696b35486c577a384a496339755f6944435a766961346369354e6a325f33505f324c304e674e7056766a6f727853447673362d483746746f6f614d53774d48774c36684f4745646d726c6969484f5a37704c49696f71624156346a37474a70744451373772554b54674e436f354951377a4b6745756765474b537064354b6849544e734477676e6769542d49514b38424c637a3747566761546a7a6f53747a513338576c68454750764c7472735a4154424452567878577a653973746a4534344f30456f4e5a64795442455239687863683561465a4b4e6b546541777954506838534d303276774952367469416c37793757576d65474576366e75454c47624f5461504f52356242543348775034714a36664941464d624f684b50384467506c555a354f654f64634b5644486c4f65626f7368533231655948496e7775647561737a6474334630457a76477957364335434a7330727a34776f4a62636947564c31637435496777374e4451636d7230584e72666b552d58634e3636526c45466633744158783655426651307669644e557a3678556e474e58726b2d694a36476163656a7679352d4e6d35736a3433725f4f44374f4b376662787137383377764d50776f50735965624569582d6351504435355f4e6b68374d3054396268734d4d66464f6f6237525853496637617061446b73477661325f536d787a35485a4861787a6178304a68374d2d67695678696a78744439504b744734756d374c4c393956503756596146703049306f50375546476335526a4955222c2274616773223a5b7b226e616d65223a226447567a6441222c2276616c7565223a22625756755a334a31227d5d2c22746172676574223a2247556937747151337a4a5732435779773245527777756e4357336f576f493548417369454e4872527a3938222c227175616e74697479223a223130303030303030303030222c2264617461223a22222c22646174615f73697a65223a2230222c22646174615f726f6f74223a22222c22726577617264223a22343534353336222c227369676e6174757265223a22227d").unwrap();
        let tx =  Arweave::parse(&tx_bytes).unwrap();
        let parsed_tx: Value  = serde_json::from_str(&tx).unwrap();
        assert_eq!(parsed_tx["formatted_json"]["signature_data"], "56149d23cc905f5249c0cb80728c841657a065d05ed249f42a670aa9239c9005a2b35a9eb39252de429442e6fbda9f20");
    }

    #[test]
    fn test_empty_vec(){
        let tags: Vec<Tag<Base64>> = vec![];
        let data = tags.to_deep_hash_item().unwrap();
        let deep_hash_item: Vec<DeepHashItem> = vec![data];
        println!("deep_hash_item {:?}", DeepHashItem::from_children(deep_hash_item.clone()));
        let deep_hash = deep_hash(DeepHashItem::from_children(deep_hash_item)).unwrap();
        println!("deep_hash {:?}", hex::encode(deep_hash));
    }
}
